#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script test nhanh logic t√≠nh to√°n ph√≠ giao h√†ng
T√°c gi·∫£: DataCo Team
Ng√†y t·∫°o: 2025-01-11
"""

from decimal import Decimal, ROUND_HALF_UP

def test_shipping_fee_calculation():
    """Test logic t√≠nh to√°n shipping_fee"""
    
    print("üßÆ === TEST LOGIC T√çNH TO√ÅN PH√ç GIAO H√ÄNG ===\n")
    
    # H·∫±ng s·ªë
    BASE_PRICE_PER_KG = Decimal('15000')
    VOLUME_TO_WEIGHT_FACTOR = Decimal('200')
    
    # H·ªá s·ªë
    SERVICE_TYPE_MULTIPLIERS = {
        'SECOND_CLASS': Decimal('0.8'),
        'STANDARD': Decimal('1.0'),
        'FIRST_CLASS': Decimal('1.3'),
        'EXPRESS': Decimal('1.8')
    }
    
    FRAGILE_MULTIPLIER = Decimal('1.3')
    NORMAL_MULTIPLIER = Decimal('1.0')
    
    def calculate_shipping_fee(weight, volume, is_fragile, service_type):
        """T√≠nh shipping_fee"""
        weight = Decimal(str(weight))
        volume = Decimal(str(volume))
        
        # 1. Tr·ªçng l∆∞·ª£ng t√≠nh ph√≠
        volume_weight = volume * VOLUME_TO_WEIGHT_FACTOR
        shipping_weight = max(weight, volume_weight)
        
        # 2. Ph√≠ c∆° b·∫£n
        base_fee = shipping_weight * BASE_PRICE_PER_KG
        
        # 3. H·ªá s·ªë r·ªßi ro
        fragile_multiplier = FRAGILE_MULTIPLIER if is_fragile else NORMAL_MULTIPLIER
        
        # 4. H·ªá s·ªë service type
        service_multiplier = SERVICE_TYPE_MULTIPLIERS.get(service_type, Decimal('1.0'))
        
        # 5. T·ªïng ph√≠
        total_fee = base_fee * fragile_multiplier * service_multiplier
        total_fee = total_fee.quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)
        
        return total_fee, shipping_weight, base_fee
    
    # Test cases
    test_cases = [
        {
            'name': 'S·∫£n ph·∫©m nh·∫π, th·ªÉ t√≠ch l·ªõn',
            'weight': 10,
            'volume': 0.5,
            'is_fragile': False,
            'service_type': 'STANDARD'
        },
        {
            'name': 'S·∫£n ph·∫©m n·∫∑ng, th·ªÉ t√≠ch nh·ªè',
            'weight': 150,
            'volume': 0.1,
            'is_fragile': False,
            'service_type': 'STANDARD'
        },
        {
            'name': 'S·∫£n ph·∫©m d·ªÖ v·ª°, EXPRESS',
            'weight': 50,
            'volume': 0.2,
            'is_fragile': True,
            'service_type': 'EXPRESS'
        },
        {
            'name': 'Field & Stream Safe (nh∆∞ trong DB)',
            'weight': 150,
            'volume': 1.2,
            'is_fragile': False,
            'service_type': 'STANDARD'
        },
        {
            'name': 'Field & Stream Safe - EXPRESS',
            'weight': 150,
            'volume': 1.2,
            'is_fragile': False,
            'service_type': 'EXPRESS'
        },
        {
            'name': 'Field & Stream Safe - SECOND_CLASS',
            'weight': 150,
            'volume': 1.2,
            'is_fragile': False,
            'service_type': 'SECOND_CLASS'
        }
    ]
    
    for i, case in enumerate(test_cases, 1):
        print(f"üì¶ Test Case {i}: {case['name']}")
        print(f"   Input: {case['weight']}kg, {case['volume']}m¬≥, Fragile: {case['is_fragile']}, Service: {case['service_type']}")
        
        shipping_fee, shipping_weight, base_fee = calculate_shipping_fee(
            case['weight'], case['volume'], case['is_fragile'], case['service_type']
        )
        
        volume_weight = Decimal(str(case['volume'])) * VOLUME_TO_WEIGHT_FACTOR
        
        print(f"   Tr·ªçng l∆∞·ª£ng th·ª±c t·∫ø: {case['weight']}kg")
        print(f"   Tr·ªçng l∆∞·ª£ng quy ƒë·ªïi: {volume_weight}kg")
        print(f"   Tr·ªçng l∆∞·ª£ng t√≠nh ph√≠: {shipping_weight}kg")
        print(f"   Ph√≠ c∆° b·∫£n: {base_fee:,} VNƒê")
        print(f"   H·ªá s·ªë r·ªßi ro: {FRAGILE_MULTIPLIER if case['is_fragile'] else NORMAL_MULTIPLIER}")
        print(f"   H·ªá s·ªë service: {SERVICE_TYPE_MULTIPLIERS[case['service_type']]}")
        print(f"   ‚û°Ô∏è  Shipping Fee: {shipping_fee:,} VNƒê")
        print()
    
    # Test delivery_fee calculation
    print("üöö === TEST DELIVERY FEE CALCULATION ===\n")
    
    # Gi·∫£ l·∫≠p 1 order c√≥ nhi·ªÅu items
    order_items = [
        {'shipping_fee': Decimal('3600000.00')},  # Item 1
        {'shipping_fee': Decimal('1800000.00')},  # Item 2  
        {'shipping_fee': Decimal('900000.00')},   # Item 3
    ]
    
    delivery_fee = sum(item['shipping_fee'] for item in order_items)
    
    print(f"üìã Order v·ªõi {len(order_items)} items:")
    for i, item in enumerate(order_items, 1):
        print(f"   Item {i}: {item['shipping_fee']:,} VNƒê")
    print(f"   ‚û°Ô∏è  Delivery Fee: {delivery_fee:,} VNƒê")
    print()
    
    print("‚úÖ === T·∫§T C·∫¢ TEST CASES HO√ÄN TH√ÄNH ===")

if __name__ == "__main__":
    test_shipping_fee_calculation()



