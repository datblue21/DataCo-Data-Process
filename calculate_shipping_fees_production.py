#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script t√≠nh v√† c·∫≠p nh·∫≠t ph√≠ giao h√†ng (shipping_fee v√† delivery_fee) - PRODUCTION VERSION
T√°c gi·∫£: DataCo Team
Ng√†y t·∫°o: 2025-01-11
Phi√™n b·∫£n: Production 1.0
"""

import mysql.connector
import logging
from datetime import datetime
from decimal import Decimal, ROUND_HALF_UP
import sys
import os
import json

# C·∫•u h√¨nh logging
def setup_logging():
    """Thi·∫øt l·∫≠p logging v·ªõi file ri√™ng bi·ªát cho production"""
    log_dir = "production_logs"
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)
    
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    log_file = os.path.join(log_dir, f"shipping_fee_production_{timestamp}.log")
    error_log_file = os.path.join(log_dir, f"shipping_fee_errors_{timestamp}.log")
    
    # Logger ch√≠nh
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(log_file, encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )
    
    # Logger ri√™ng cho errors
    error_logger = logging.getLogger('error')
    error_handler = logging.FileHandler(error_log_file, encoding='utf-8')
    error_handler.setLevel(logging.ERROR)
    error_formatter = logging.Formatter('%(asctime)s - ERROR - %(message)s')
    error_handler.setFormatter(error_formatter)
    error_logger.addHandler(error_handler)
    
    return log_file, error_log_file

# Th√¥ng tin k·∫øt n·ªëi database PRODUCTION
DB_CONFIG = {
    'host': 'server.aptech.io',
    'port': 3307,
    'database': 'fastroute',  # PRODUCTION DATABASE
    'user': 'fastroute_user',
    'password': 'fastroute_password',
    'charset': 'utf8mb4',
    'autocommit': False
}

# H·ªá s·ªë service type
SERVICE_TYPE_MULTIPLIERS = {
    'SECOND_CLASS': Decimal('0.8'),
    'STANDARD': Decimal('1.0'),
    'FIRST_CLASS': Decimal('1.3'),
    'EXPRESS': Decimal('1.8')
}

# H·∫±ng s·ªë t√≠nh to√°n
BASE_PRICE_PER_KG = Decimal('15000')  # 15,000 VNƒê/kg
FRAGILE_MULTIPLIER = Decimal('1.3')   # H·ªá s·ªë h√†ng d·ªÖ v·ª°
NORMAL_MULTIPLIER = Decimal('1.0')    # H·ªá s·ªë h√†ng b√¨nh th∆∞·ªùng
VOLUME_TO_WEIGHT_FACTOR = Decimal('200')  # Volume (m¬≥) √ó 200 = kg

class ProductionShippingFeeCalculator:
    def __init__(self):
        self.connection = None
        self.cursor = None
        self.log_file, self.error_log_file = setup_logging()
        self.stats = {
            'order_items_processed': 0,
            'order_items_updated': 0,
            'order_items_errors': 0,
            'deliveries_processed': 0,
            'deliveries_updated': 0,
            'deliveries_errors': 0,
            'start_time': datetime.now(),
            'end_time': None
        }
        
        logging.info("=== B·∫ÆT ƒê·∫¶U PRODUCTION DEPLOYMENT - T√çNH TO√ÅN PH√ç GIAO H√ÄNG ===")
        logging.info(f"Database: {DB_CONFIG['database']}")
        logging.info(f"Log file: {self.log_file}")
        logging.info(f"Error log file: {self.error_log_file}")
        
    def connect_database(self):
        """K·∫øt n·ªëi ƒë·∫øn database v·ªõi retry logic"""
        max_retries = 3
        for attempt in range(max_retries):
            try:
                self.connection = mysql.connector.connect(**DB_CONFIG)
                self.cursor = self.connection.cursor(dictionary=True)
                logging.info(f"‚úÖ K·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn database: {DB_CONFIG['database']}")
                return True
            except mysql.connector.Error as e:
                logging.error(f"‚ùå L·ªói k·∫øt n·ªëi database (l·∫ßn {attempt + 1}/{max_retries}): {e}")
                if attempt == max_retries - 1:
                    return False
        return False
    
    def disconnect_database(self):
        """ƒê√≥ng k·∫øt n·ªëi database"""
        if self.cursor:
            self.cursor.close()
        if self.connection:
            self.connection.close()
        logging.info("‚úÖ ƒê√£ ƒë√≥ng k·∫øt n·ªëi database")
    
    def create_backup_table(self):
        """T·∫°o b·∫£ng backup tr∆∞·ªõc khi c·∫≠p nh·∫≠t"""
        try:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            
            # Backup order_items
            backup_query = f"""
            CREATE TABLE order_items_backup_{timestamp} AS 
            SELECT * FROM order_items WHERE shipping_fee IS NOT NULL OR shipping_fee != 0
            """
            self.cursor.execute(backup_query)
            
            # Backup deliveries
            backup_query = f"""
            CREATE TABLE deliveries_backup_{timestamp} AS 
            SELECT * FROM deliveries WHERE delivery_fee IS NOT NULL OR delivery_fee != 0
            """
            self.cursor.execute(backup_query)
            
            self.connection.commit()
            logging.info(f"‚úÖ ƒê√£ t·∫°o b·∫£ng backup: order_items_backup_{timestamp}, deliveries_backup_{timestamp}")
            return True
        except mysql.connector.Error as e:
            logging.error(f"‚ùå L·ªói t·∫°o backup table: {e}")
            return False
    
    def calculate_shipping_weight(self, actual_weight, volume):
        """T√≠nh tr·ªçng l∆∞·ª£ng t√≠nh ph√≠ = MAX(tr·ªçng l∆∞·ª£ng th·ª±c t·∫ø, tr·ªçng l∆∞·ª£ng quy ƒë·ªïi)"""
        actual_weight = Decimal(str(actual_weight)) if actual_weight else Decimal('0')
        volume = Decimal(str(volume)) if volume else Decimal('0')
        
        # Tr·ªçng l∆∞·ª£ng quy ƒë·ªïi = Volume (m¬≥) √ó 200
        volume_weight = volume * VOLUME_TO_WEIGHT_FACTOR
        
        shipping_weight = max(actual_weight, volume_weight)
        return shipping_weight
    
    def calculate_base_fee(self, shipping_weight):
        """T√≠nh ph√≠ c∆° b·∫£n = Tr·ªçng l∆∞·ª£ng t√≠nh ph√≠ √ó 15,000 VNƒê/kg"""
        return shipping_weight * BASE_PRICE_PER_KG
    
    def get_fragile_multiplier(self, is_fragile):
        """L·∫•y h·ªá s·ªë r·ªßi ro d·ª±a tr√™n is_fragile"""
        return FRAGILE_MULTIPLIER if is_fragile else NORMAL_MULTIPLIER
    
    def get_service_type_multiplier(self, service_type):
        """L·∫•y h·ªá s·ªë service type"""
        return SERVICE_TYPE_MULTIPLIERS.get(service_type, Decimal('1.0'))
    
    def calculate_shipping_fee(self, weight, volume, is_fragile, service_type):
        """
        T√≠nh ph√≠ logistics cho m·ªôt order_item
        T·ªîNG PH√ç LOGISTICS = PH√ç C∆† B·∫¢N √ó H·ªÜ S·ªê R·ª¶I RO √ó H·ªÜ S·ªê SERVICE_TYPE
        """
        # 1. T√≠nh tr·ªçng l∆∞·ª£ng t√≠nh ph√≠
        shipping_weight = self.calculate_shipping_weight(weight, volume)
        
        # 2. T√≠nh ph√≠ c∆° b·∫£n
        base_fee = self.calculate_base_fee(shipping_weight)
        
        # 3. √Åp d·ª•ng h·ªá s·ªë r·ªßi ro
        fragile_multiplier = self.get_fragile_multiplier(is_fragile)
        
        # 4. √Åp d·ª•ng h·ªá s·ªë service type
        service_multiplier = self.get_service_type_multiplier(service_type)
        
        # 5. T√≠nh t·ªïng ph√≠
        total_fee = base_fee * fragile_multiplier * service_multiplier
        
        # L√†m tr√≤n ƒë·∫øn 2 ch·ªØ s·ªë th·∫≠p ph√¢n
        total_fee = total_fee.quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)
        
        return total_fee, shipping_weight, base_fee
    
    def get_order_items_batch(self, limit=1000, offset=0):
        """L·∫•y d·ªØ li·ªáu order_items theo batch ƒë·ªÉ x·ª≠ l√Ω"""
        query = """
        SELECT 
            oi.id as order_item_id,
            oi.order_id,
            oi.product_id,
            oi.quantity,
            oi.shipping_fee as current_shipping_fee,
            p.weight,
            p.volume,
            p.is_fragile,
            p.name as product_name,
            d.service_type,
            o.external_id as order_external_id
        FROM order_items oi
        JOIN products p ON oi.product_id = p.id
        JOIN orders o ON oi.order_id = o.id
        JOIN deliveries d ON o.id = d.order_id
        ORDER BY oi.id
        LIMIT %s OFFSET %s
        """
        
        try:
            self.cursor.execute(query, (limit, offset))
            results = self.cursor.fetchall()
            return results
        except mysql.connector.Error as e:
            logging.error(f"‚ùå L·ªói truy v·∫•n order_items batch (offset={offset}): {e}")
            return []
    
    def update_order_item_shipping_fee_batch(self, updates):
        """C·∫≠p nh·∫≠t shipping_fee cho nhi·ªÅu order_items c√πng l√∫c"""
        if not updates:
            return 0
        
        try:
            update_query = """
            UPDATE order_items 
            SET shipping_fee = %s, updated_at = NOW()
            WHERE id = %s
            """
            self.cursor.executemany(update_query, updates)
            return len(updates)
        except mysql.connector.Error as e:
            logging.error(f"‚ùå L·ªói c·∫≠p nh·∫≠t batch shipping_fee: {e}")
            return 0
    
    def process_shipping_fees(self):
        """X·ª≠ l√Ω t√≠nh to√°n v√† c·∫≠p nh·∫≠t shipping_fees theo batch"""
        logging.info("üîÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω shipping_fees...")
        
        batch_size = 1000
        offset = 0
        total_processed = 0
        total_updated = 0
        total_errors = 0
        
        while True:
            # L·∫•y batch data
            batch_items = self.get_order_items_batch(batch_size, offset)
            if not batch_items:
                break
            
            batch_updates = []
            batch_processed = 0
            batch_errors = 0
            
            for item in batch_items:
                try:
                    # T√≠nh shipping_fee
                    shipping_fee, shipping_weight, base_fee = self.calculate_shipping_fee(
                        weight=item['weight'],
                        volume=item['volume'],
                        is_fragile=bool(item['is_fragile']),
                        service_type=item['service_type']
                    )
                    
                    # Th√™m v√†o batch updates
                    batch_updates.append((shipping_fee, item['order_item_id']))
                    batch_processed += 1
                    
                    # Log chi ti·∫øt cho m·ªôt s·ªë item ƒë·∫ßu ti√™n
                    if total_processed < 10:
                        logging.info(f"Order Item {item['order_item_id']}: {shipping_fee:,} VNƒê (Weight: {shipping_weight}kg)")
                    
                except Exception as e:
                    logging.error(f"‚ùå L·ªói x·ª≠ l√Ω order_item {item['order_item_id']}: {e}")
                    batch_errors += 1
            
            # C·∫≠p nh·∫≠t batch
            if batch_updates:
                updated_count = self.update_order_item_shipping_fee_batch(batch_updates)
                total_updated += updated_count
                
                if updated_count != len(batch_updates):
                    logging.warning(f"‚ö†Ô∏è  Batch update kh√¥ng ho√†n to√†n: {updated_count}/{len(batch_updates)}")
            
            total_processed += batch_processed
            total_errors += batch_errors
            
            # Log ti·∫øn tr√¨nh
            if total_processed % 10000 == 0:
                logging.info(f"üìä ƒê√£ x·ª≠ l√Ω {total_processed:,} order_items...")
            
            offset += batch_size
        
        self.stats['order_items_processed'] = total_processed
        self.stats['order_items_updated'] = total_updated
        self.stats['order_items_errors'] = total_errors
        
        logging.info(f"‚úÖ Ho√†n th√†nh x·ª≠ l√Ω shipping_fees:")
        logging.info(f"   - ƒê√£ x·ª≠ l√Ω: {total_processed:,} order_items")
        logging.info(f"   - ƒê√£ c·∫≠p nh·∫≠t: {total_updated:,} order_items")
        logging.info(f"   - L·ªói: {total_errors:,} order_items")
        
        return total_errors == 0
    
    def get_deliveries_data(self):
        """L·∫•y d·ªØ li·ªáu deliveries c·∫ßn t√≠nh delivery_fee"""
        query = """
        SELECT 
            d.id as delivery_id,
            d.order_id,
            d.delivery_fee as current_delivery_fee,
            SUM(oi.shipping_fee) as total_shipping_fee,
            COUNT(oi.id) as item_count
        FROM deliveries d
        JOIN orders o ON d.order_id = o.id
        JOIN order_items oi ON o.id = oi.order_id
        WHERE oi.shipping_fee IS NOT NULL
        GROUP BY d.id, d.order_id, d.delivery_fee
        ORDER BY d.id
        """
        
        try:
            self.cursor.execute(query)
            results = self.cursor.fetchall()
            logging.info(f"üìã T√¨m ƒë∆∞·ª£c {len(results)} deliveries c·∫ßn c·∫≠p nh·∫≠t delivery_fee")
            return results
        except mysql.connector.Error as e:
            logging.error(f"‚ùå L·ªói truy v·∫•n deliveries: {e}")
            return []
    
    def update_delivery_fees_batch(self, updates):
        """C·∫≠p nh·∫≠t delivery_fee cho nhi·ªÅu deliveries c√πng l√∫c"""
        if not updates:
            return 0
        
        try:
            update_query = """
            UPDATE deliveries 
            SET delivery_fee = %s, updated_at = NOW()
            WHERE id = %s
            """
            self.cursor.executemany(update_query, updates)
            return len(updates)
        except mysql.connector.Error as e:
            logging.error(f"‚ùå L·ªói c·∫≠p nh·∫≠t batch delivery_fee: {e}")
            return 0
    
    def process_delivery_fees(self):
        """X·ª≠ l√Ω t√≠nh to√°n v√† c·∫≠p nh·∫≠t delivery_fees"""
        logging.info("üîÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω delivery_fees...")
        
        deliveries = self.get_deliveries_data()
        if not deliveries:
            logging.warning("‚ö†Ô∏è  Kh√¥ng c√≥ deliveries n√†o ƒë·ªÉ x·ª≠ l√Ω")
            return False
        
        delivery_updates = []
        processed = 0
        errors = 0
        
        for delivery in deliveries:
            try:
                delivery_fee = Decimal(str(delivery['total_shipping_fee']))
                delivery_updates.append((delivery_fee, delivery['delivery_id']))
                processed += 1
                
                # Log chi ti·∫øt cho m·ªôt s·ªë delivery ƒë·∫ßu ti√™n
                if processed <= 10:
                    logging.info(f"Delivery {delivery['delivery_id']}: {delivery_fee:,} VNƒê ({delivery['item_count']} items)")
                    
            except Exception as e:
                logging.error(f"‚ùå L·ªói x·ª≠ l√Ω delivery {delivery['delivery_id']}: {e}")
                errors += 1
        
        # C·∫≠p nh·∫≠t t·∫•t c·∫£ deliveries
        if delivery_updates:
            updated_count = self.update_delivery_fees_batch(delivery_updates)
            
            self.stats['deliveries_processed'] = processed
            self.stats['deliveries_updated'] = updated_count
            self.stats['deliveries_errors'] = errors
            
            logging.info(f"‚úÖ Ho√†n th√†nh x·ª≠ l√Ω delivery_fees:")
            logging.info(f"   - ƒê√£ x·ª≠ l√Ω: {processed:,} deliveries")
            logging.info(f"   - ƒê√£ c·∫≠p nh·∫≠t: {updated_count:,} deliveries")
            logging.info(f"   - L·ªói: {errors:,} deliveries")
            
            return errors == 0
        
        return False
    
    def save_execution_report(self):
        """L∆∞u b√°o c√°o th·ª±c thi"""
        self.stats['end_time'] = datetime.now()
        execution_time = self.stats['end_time'] - self.stats['start_time']
        
        report = {
            'execution_info': {
                'start_time': self.stats['start_time'].isoformat(),
                'end_time': self.stats['end_time'].isoformat(),
                'execution_time_seconds': execution_time.total_seconds(),
                'database': DB_CONFIG['database'],
                'log_file': self.log_file,
                'error_log_file': self.error_log_file
            },
            'order_items_stats': {
                'processed': self.stats['order_items_processed'],
                'updated': self.stats['order_items_updated'],
                'errors': self.stats['order_items_errors']
            },
            'deliveries_stats': {
                'processed': self.stats['deliveries_processed'],
                'updated': self.stats['deliveries_updated'],
                'errors': self.stats['deliveries_errors']
            },
            'calculation_config': {
                'base_price_per_kg': str(BASE_PRICE_PER_KG),
                'fragile_multiplier': str(FRAGILE_MULTIPLIER),
                'volume_to_weight_factor': str(VOLUME_TO_WEIGHT_FACTOR),
                'service_type_multipliers': {k: str(v) for k, v in SERVICE_TYPE_MULTIPLIERS.items()}
            }
        }
        
        # L∆∞u b√°o c√°o JSON
        report_file = f"production_logs/shipping_fee_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        # L∆∞u b√°o c√°o markdown
        markdown_report = f"""# B√ÅO C√ÅO TH·ª∞C THI T√çNH TO√ÅN PH√ç GIAO H√ÄNG

## Th√¥ng tin th·ª±c thi
- **Th·ªùi gian b·∫Øt ƒë·∫ßu:** {self.stats['start_time'].strftime('%Y-%m-%d %H:%M:%S')}
- **Th·ªùi gian k·∫øt th√∫c:** {self.stats['end_time'].strftime('%Y-%m-%d %H:%M:%S')}
- **Th·ªùi gian th·ª±c thi:** {execution_time.total_seconds():.2f} gi√¢y
- **Database:** {DB_CONFIG['database']}

## K·∫øt qu·∫£ x·ª≠ l√Ω

### Order Items (shipping_fee)
- **ƒê√£ x·ª≠ l√Ω:** {self.stats['order_items_processed']:,} items
- **ƒê√£ c·∫≠p nh·∫≠t:** {self.stats['order_items_updated']:,} items
- **L·ªói:** {self.stats['order_items_errors']:,} items
- **T·ª∑ l·ªá th√†nh c√¥ng:** {(self.stats['order_items_updated']/max(self.stats['order_items_processed'], 1)*100):.2f}%

### Deliveries (delivery_fee)
- **ƒê√£ x·ª≠ l√Ω:** {self.stats['deliveries_processed']:,} deliveries
- **ƒê√£ c·∫≠p nh·∫≠t:** {self.stats['deliveries_updated']:,} deliveries
- **L·ªói:** {self.stats['deliveries_errors']:,} deliveries
- **T·ª∑ l·ªá th√†nh c√¥ng:** {(self.stats['deliveries_updated']/max(self.stats['deliveries_processed'], 1)*100):.2f}%

## C·∫•u h√¨nh t√≠nh to√°n
- **Gi√° c∆° b·∫£n:** {BASE_PRICE_PER_KG:,} VNƒê/kg
- **H·ªá s·ªë h√†ng d·ªÖ v·ª°:** {FRAGILE_MULTIPLIER}
- **H·ªá s·ªë quy ƒë·ªïi th·ªÉ t√≠ch:** {VOLUME_TO_WEIGHT_FACTOR} kg/m¬≥

### H·ªá s·ªë service type:
- **SECOND_CLASS:** {SERVICE_TYPE_MULTIPLIERS['SECOND_CLASS']}
- **STANDARD:** {SERVICE_TYPE_MULTIPLIERS['STANDARD']}
- **FIRST_CLASS:** {SERVICE_TYPE_MULTIPLIERS['FIRST_CLASS']}
- **EXPRESS:** {SERVICE_TYPE_MULTIPLIERS['EXPRESS']}

## Files
- **Log file:** {self.log_file}
- **Error log file:** {self.error_log_file}
- **Report file:** {report_file}
"""
        
        markdown_file = f"production_logs/shipping_fee_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
        with open(markdown_file, 'w', encoding='utf-8') as f:
            f.write(markdown_report)
        
        logging.info(f"üìÑ ƒê√£ l∆∞u b√°o c√°o: {report_file}")
        logging.info(f"üìÑ ƒê√£ l∆∞u b√°o c√°o markdown: {markdown_file}")
        
        return report_file, markdown_file
    
    def run(self):
        """Ch·∫°y to√†n b·ªô quy tr√¨nh t√≠nh to√°n ph√≠ giao h√†ng PRODUCTION"""
        try:
            # 1. K·∫øt n·ªëi database
            if not self.connect_database():
                logging.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi database. D·ª´ng th·ª±c thi.")
                return False
            
            # 2. T·∫°o backup
            if not self.create_backup_table():
                logging.error("‚ùå Kh√¥ng th·ªÉ t·∫°o backup. D·ª´ng th·ª±c thi.")
                return False
            
            # 3. B·∫Øt ƒë·∫ßu transaction
            self.connection.start_transaction()
            logging.info("üîÑ B·∫Øt ƒë·∫ßu transaction")
            
            # 4. X·ª≠ l√Ω shipping_fees
            if not self.process_shipping_fees():
                self.connection.rollback()
                logging.error("‚ùå L·ªói x·ª≠ l√Ω shipping_fees, rollback transaction")
                return False
            
            # 5. X·ª≠ l√Ω delivery_fees
            if not self.process_delivery_fees():
                self.connection.rollback()
                logging.error("‚ùå L·ªói x·ª≠ l√Ω delivery_fees, rollback transaction")
                return False
            
            # 6. Commit transaction
            self.connection.commit()
            logging.info("‚úÖ COMMIT TRANSACTION TH√ÄNH C√îNG!")
            
            # 7. L∆∞u b√°o c√°o
            report_file, markdown_file = self.save_execution_report()
            
            logging.info("üéâ === HO√ÄN TH√ÄNH PRODUCTION DEPLOYMENT ===")
            logging.info(f"üìä T·ªïng k·∫øt:")
            logging.info(f"   - Order items: {self.stats['order_items_updated']:,}/{self.stats['order_items_processed']:,}")
            logging.info(f"   - Deliveries: {self.stats['deliveries_updated']:,}/{self.stats['deliveries_processed']:,}")
            
            return True
            
        except Exception as e:
            logging.error(f"‚ùå L·ªói nghi√™m tr·ªçng trong qu√° tr√¨nh x·ª≠ l√Ω: {e}")
            if self.connection:
                self.connection.rollback()
                logging.error("üîÑ ƒê√£ rollback transaction")
            return False
        finally:
            self.disconnect_database()

def main():
    """H√†m main cho production"""
    print("üöÄ === PRODUCTION DEPLOYMENT - T√çNH TO√ÅN PH√ç GIAO H√ÄNG ===")
    print("‚ö†Ô∏è  C·∫¢NH B√ÅO: Script n√†y s·∫Ω c·∫≠p nh·∫≠t DATABASE PRODUCTION!")
    print()
    print("Th√¥ng tin k·∫øt n·ªëi:")
    print(f"   Host: {DB_CONFIG['host']}:{DB_CONFIG['port']}")
    print(f"   Database: {DB_CONFIG['database']}")
    print(f"   User: {DB_CONFIG['user']}")
    print()
    
    # X√°c nh·∫≠n t·ª´ ng∆∞·ªùi d√πng
    confirm1 = input("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c? (yes/no): ").strip().lower()
    if confirm1 != 'yes':
        print("‚ùå ƒê√£ h·ªßy th·ª±c thi.")
        return
    
    confirm2 = input("Vui l√≤ng g√µ 'PRODUCTION' ƒë·ªÉ x√°c nh·∫≠n: ").strip()
    if confirm2 != 'PRODUCTION':
        print("‚ùå X√°c nh·∫≠n kh√¥ng ch√≠nh x√°c. ƒê√£ h·ªßy th·ª±c thi.")
        return
    
    print("üîÑ B·∫Øt ƒë·∫ßu th·ª±c thi...")
    
    # Ch·∫°y script
    calculator = ProductionShippingFeeCalculator()
    success = calculator.run()
    
    if success:
        print(f"\nüéâ ‚úÖ PRODUCTION DEPLOYMENT TH√ÄNH C√îNG!")
        print(f"üìÑ Log file: {calculator.log_file}")
        print(f"üìÑ Error log file: {calculator.error_log_file}")
    else:
        print(f"\nüí• ‚ùå PRODUCTION DEPLOYMENT TH·∫§T B·∫†I!")
        print(f"üìÑ Xem chi ti·∫øt trong log files:")
        print(f"   - {calculator.log_file}")
        print(f"   - {calculator.error_log_file}")

if __name__ == "__main__":
    main()



